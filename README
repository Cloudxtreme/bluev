Source code and electronic designs are licensed under: 
The GNU General Public License Version 3

This is a Valentine V1 ESP interface based on the ATtiny4313 running at 20Mhz

(Note: The ATtiny2313 should also work as I'm not using more than half the RAM or Flash)

The hard part about implementing ESP packet sends is that the UART
needs to be switched in and out, and the bytes have to be paced
according to specific timing, and there is a holdoff (don't send) bit.
This device is designed to do that hard, subtle, fiddly timing stuff.
Just send it a correct frame (from SOF to EOF with valid 3rd party
device ID and checksum) and it does the rest.  It will not accept
another command until the one is echoed (if it never is, and there is
a time slice, it was invalid).

Currently, only the checksum version of ESP is supported.  Upgrade your V1.

Baud is 57600 as per spec.

See Downloads for schematic or board info when available.

The pins on the ATtiny4313 are (PDIP/SOIC)

1 Reset (nc/ISP/dW)
2 RXD PD0 - from Bluetooth Module or serial transmit
3 TXD PD1 - to pin 11 ICP1 and V1 Data Line  (and to bluetooth/serial receive via diode)
4 XTAL1 - to 20Mhz resonator or crystal
5 XTAL2 - to 20Mhz resonator or crystal
6 INT0 PD2 nc
7 INT1 PD3 nc
8 PD4 nc
9 PD5 nc
10 GND - to ground

20 VCC - to 5v
19 PB7 nc SCK for ISP
18 PB6 nc MISO for ISP
17 PB5 nc MOSI for ISP
16 PB4 nc
15 PB3 nc
14 PB2 nc
13 PB1 nc
12 PB0 nc
11 ICP1 PD6 - to pin 3 TXD and V1 Data Line (and to bluetooth/serial receive via diode)

The ICP1 is used to create a 57600 baud software UART input and to do
timing to create proper framing and time slice.

The data stream from all devices included echoed data from the
interface will directly go out via serial (breaks may cause nulls in
the data).  Typically to bluetooth.

Data from the (bluetooth) serial interface will be stored and
validated (it has to be a valid ESP message with origin IDs 3, 4, or
5) and then sent out in the correct time slice for the originator ID.

Using a TTL serial port on /dev/ttyUSB0:

v1reShark is a stream dumper and decoder (in progress)

v1send will send simple commands, mainly to set something, e.g. option 8 turns the display off, option 9 turns it on.

I usually use "./v1reshark | uniq &", then do v1send to inquire or change things.

TODO:

Better sync / collision avoidance with other things on the bus - stop bit routine delays start of slice?
v1send - add option to ask for version for display, audio, savvy; (factory reset?)
v1send - write user bytes, sweep stuff???
